esphome:
  name: thermostat
  friendly_name: Thermostat
  platform: espressif32
  board: esp32-s3-devkitc-1 #8mb flash no psram
  # I'm using the Freenove ESP32 S3 WROOM_Board
  # they have a pinout on the Camera Component but not in the boards wtf

  on_boot:
    priority: -100.0
    then:      
      - lambda: "id(oled_contrast).publish_state(0.4);"

 
# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Thermostat Fallback Hotspot"
    password: "OhGodEverythingIsBroken!"

substitutions:
  room: FoxHole # Room Name
  entity_heater: input_boolean.tut_thermo_fire    ### Change for your 'Heating' Entity
  entity_cooler: input_boolean.tut_thermo_cool    ### Change for your 'Cooling' Entity
  entity_fan: input_boolean.tut_thermo_fan
  default_low: 60 °F
  default_hi: 80 °F

logger:
  logs:
    climate: none
    sensor: none    

external_components:
  - source:
      type: git
      url: https://github.com/MichaKersloot/esphome_custom_components
    components: [ esp32_camera ]

esp32_camera:
  external_clock:
    pin: GPIO15
    frequency: 20MHz
  i2c_pins:
    sda: GPIO4
    scl: GPIO5
  data_pins: [GPIO11, GPIO9, GPIO8, GPIO10, GPIO12, GPIO18, GPIO17, GPIO16]
  vsync_pin: GPIO6
  href_pin: GPIO7
  pixel_clock_pin: GPIO13
  name: "Thermostat Cam"

i2c:
  frequency: 400kHz #will this mess with the cam?

light:
  - platform: esp32_rmt_led_strip
    id: thermostat_light
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "RGBLight"


status_led:
    pin: GPIO2

switch:
  - platform: template
    id: heat_cool
    optimistic: true

  - platform: gpio
    id: relay_heat_cool
    pin: 
      number: GPIO40
    inverted: true    

  - platform: gpio
    id: relay_climate
    pin: 
      number: GPIO39
    inverted: true

  - platform: gpio1
    id: relay_fan
    pin: 
      number: GPIO38
    inverted: true

  - platform: template
    id: brightness
    optimistic: true

  - platform: template
    name: "Fan"
    id: run_fan
    turn_off: #allows control of fan independent of climate state
      then:
        - if:
          condition:
            - binary_sensor.is_off: relay_climate
          then:
            - switch.turn_off: relay_fan
    turn_on:
      then:
        - switch.turn_on: relay_fan
 

binary_sensor:
  - platform: template
    id: fire
  - platform: template
    id: cool
  - platform: template
    id: fan

  - platform: gpio
    id: button
    pin:
      number: GPIO01 #we can get away with one of the boot pins here as its not high on start if we need to
    on_press:
      then:
        - switch.toggle: heat_cool
    on_double_click:
      min_length: 50ms
      max_length: 350ms
      then:
         - switch.toggle: brightness

climate:
  - platform: thermostat
    min_cooling_off_time: 5min
    min_cooling_run_time: 15min
    
    min_heating_off_time: 5min
    min_heating_run_time: 15min
    
    #min_fanning_off_time: 10s
    #min_fanning_run_time: 10s 

    min_idle_time: 5min
    visual:
      min_temperature: 60 °F
      max_temperature: 81 °F
    name: "${room} Thermostat"
    id: this_thermostat
    sensor: !lambda "return internal_temperature + temperature_offset;"

### Updated for ESPHome v2022.10.0 Onwards
    default_preset: Home                      ### NEW! Use this to set Preset
    on_boot_restore_from: memory            ### Use this to "Restore From Memeory" (A Saved State) OR...
    #on_boot_restore_from: default_preset      ### Use this to set Preset to start on every Boot    
    preset:
      - name: Home
        default_target_temperature_low: $default_low
        default_target_temperature_high: $default_hi
        mode: AUTO
      - name: Away
        default_target_temperature_low: 60 °F 
        default_target_temperature_high: 80 °F
        mode: AUTO
###########################################

    cool_action:
      - switch.turn_on: relay_fan
      - switch.turn_on: relay_climate
      - switch.turn_off: relay_heat_cool
      - lambda: id(cool).publish_state(true);
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: $entity_cooler
      - light.turn_on:
        id: thermostat_light
        brightness: 100%
        red: 0%
        green: 0%
        blue: 100%

    heat_action:
      - switch.turn_on: relay_fan
      - switch.turn_on: relay_climate
      - switch.turn_on: relay_heat_cool
      - lambda: id(fire).publish_state(true);
      - homeassistant.service:
          service: homeassistant.turn_on
          data:
            entity_id: $entity_heater
      - light.turn_on:
        id: thermostat_light
        brightness: 100%
        red: 100%
        green: 0%
        blue: 0%


    idle_action:
      - if: #keeps fan on if run fan is true
        condition:
         - binary_sensor.is_off: run_fan
        then:
          - switch.turn_off: relay_fan  
          - light.turn_off: thermostat_light                    
      - switch.turn_off: relay_climate
      - switch.turn_off: relay_heat_cool
      - lambda: id(cool).publish_state(false);
      - lambda: id(fire).publish_state(false);
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: $entity_cooler
      - homeassistant.service:
          service: homeassistant.turn_off
          data:
            entity_id: $entity_heater

     #- homeassistant.service:
     #    service: homeassistant.turn_off
     #    data:
     #      entity_id: $entity_fan

   #fan_only_action:
   #  - switch.turn_on: relay_fan
   #  - switch.turn_off: relay_climate
   #  - lambda: id(fan).publish_state(true);
   #  - homeassistant.service:
   #      service: homeassistant.turn_on
   #      data:
   #        entity_id: $entity_fan

sensor:
  - platform: template
    name: "Calculated Temperature Offset"
    id: temperature_offset
    lambda: |- 
      return (internal_humidity / 100) * 2) -1) - (internal_preasure / 100)
    update_interval: 60s

  - platform: template
    name: Calculated Temperature
    id: calculated_temperature
    lambda: |-      
        return internal_temperature + temperature_offset      
    update_interval: 60s

  - platform: bme280
    iir_filter: 2x
    temperature:
      id: internal_temperature
      name: "Temperature"
      oversampling: 16x
    pressure:
      name: "Pressure"
      id: internal_preasure
      oversampling: 16x
    humidity:
      id: internal_humidity
      name: "Humidity"
      oversampling: 16x
    address: 0x77
    update_interval: 60s

  - platform: template
    id: oled_contrast

  - platform: rotary_encoder
    id: encoder
    pin_a:
      number: GPIO42
    pin_b:
      number: GPIO041
    on_clockwise:
      - if:
          condition:
            switch.is_on: brightness
          then:
            - sensor.template.publish:
                id: oled_contrast
                state: !lambda "return id(oled_contrast).state + 0.1;"
            - lambda: |-
                id(oled1).set_contrast( id(oled_contrast).state );
          else:
            - if:
                condition:
                  switch.is_on: heat_cool
                then:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_high: !lambda "return id(this_thermostat).target_temperature_high + 0.277777777;"
                else:
                  - climate.control:
                      id: this_thermostat
                      target_temperature_low: !lambda "return id(this_thermostat).target_temperature_low + 0.277777777;"
    on_anticlockwise:
      then:
        - if:
            condition:
              switch.is_on: brightness
            then:
              - sensor.template.publish:
                  id: oled_contrast
                  state: !lambda "return id(oled_contrast).state - 0.1;"
              - lambda: |-
                  id(oled1).set_contrast( id(oled_contrast).state);
            else:
              - if:
                  condition:
                    switch.is_on: heat_cool
                  then:
                    - climate.control:
                        id: this_thermostat
                        target_temperature_high: !lambda "return id(this_thermostat).target_temperature_high - 0.277777777;"
                  else:
                    - climate.control:
                        id: this_thermostat
                        target_temperature_low: !lambda "return id(this_thermostat).target_temperature_low - 0.277777777;"

display:
  - platform: ssd1306_i2c #Using a SSD1309 2.42" display
    id: oled1
    update_interval: 100.0ms
    contrast: 1
    model: "SSD1306 128x64"
    rotation: 0
    address: 0x78 #0x79
    lambda: |-
      if (id(fire).state) {id(ani_fire).next_frame(); it.image(0, 0, id(ani_fire));}
      else if (id(cool).state) {id(ani_fan).next_frame(); it.image(0, 0, id(ani_fan));}
      else {it.image(0, 0, id(home_thermometer));}

      it.print(60, 0,  id(font1), TextAlign::TOP_CENTER, "${room}");
      it.printf(128, 0,  id(font4), TextAlign::TOP_RIGHT, " %.1f%% ", id(internal_humidity).state);

      it.printf(64, 4, id(font2), TextAlign::TOP_CENTER, " %.1f°", id(internal_temperature).state * 1.8 + 32);
      it.printf(1, 64, id(font3), TextAlign::BASELINE_LEFT, "L:%.1f°", id(this_thermostat).target_temperature_low * 1.8 + 32);
      it.printf(128, 64, id(font3), TextAlign::BASELINE_RIGHT, "H:%.1f°", id(this_thermostat).target_temperature_high * 1.8 + 32);

      if (id(brightness).state) {it.image(56, 51, id(bulb));} 
      else if (id(heat_cool).state) {it.image(56, 51, id(arrow_right));}
      else {it.image(56, 51, id(arrow_left));}

animation:
  - file: "_icons/thermostat/fan.gif"
    id: ani_fan
  - file: "_icons/thermostat/fire.gif"
    id: ani_fire
image:
  - file: "_icons/thermostat/home-thermometer.png"
    id: home_thermometer
  - file: "_icons/thermostat/arrow-left-circle-outline.png"
    id: arrow_left
  - file: "_icons/thermostat/arrow-right-circle-outline.png"
    id: arrow_right
  - file: "_icons/thermostat/lightbulb-on-outline.png"
    id: bulb
font:
  - file: "_fonts/_fonts/nasalization.ttf"
    id: font1
    size: 12
  - file: "_fonts/_fonts/refsan.ttf"
    id: font2
    size: 42
  - file: "_fonts/_fonts/refsan.ttf"
    id: font3
    size: 13
  - file: "_fonts/_fonts/refsan.ttf"
    id: font4
    size: 10

